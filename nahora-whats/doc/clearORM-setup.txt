1) set clear at shard and install

2) in config/database.cr put the conection string with clear
	# initialize a pool of database connection:
	Clear::SQL.init(ENV["DATABASE_URL"]? || Amber.settings.database_url, connection_pool_size: 5)
	
	ref: https://clear.gitbook.io/project/introduction/installation

3) create the model and include the module Clear::Model
	class User
		include Clear::Model
 	 	self.table = "users"

	  # primary_key
		# column id : Int64, primary: true, presence: false
		primary_key :id, type: :uuid
		column username : String
		column phone : String
		column money : Float32?
		column gender : Gender?
		column gender : Renda?
		
		timestamps
	end

	ref: https://github.com/anykeyh/clear/tree/master/manual/model/column-types | https://anykeyh.github.io/clear/Clear/Model.html

4) everything already adjusted, now is the moment to remimber of this workflow to work with default migration amber together clear ORM.
	4.1) first create database with 'amber db create'
	4.2) now generate migration with 'amber db generate migration'
	4.3) now is the moment of the clear ORM script, create it into db/migrations in this format {number order this}_{action to be executed}_migration.cr
	4.4) create the script and always put in the end script 'p Clear::Migration::Manager.instance.apply_all'
		i.e:
			require "clear"

			class CreateTable
				include Clear::Migration

				def change(dir)
					create_enum("gender", %w(male female unknow))

					create_table(:users, id: :uuid) do |t|
						t.column :username, :string, null: false
						t.column :phone, :string, unique: true, null: false, index: true
						t.column :money, :float
						t.column :gender, :gender, default: "'unknow'"

						t.timestamps
					end

				end
			end

			p Clear::Migration::Manager.instance.apply_all
			ref: https://clear.gitbook.io/project/migrations/call-migration-script
	4.3) let's go use the amber db seed to execute the script of migration of clear ORM, requier in the db/seeds.cr our file created above.
	4.4) in the terminal execute 'amber db seed' and copy the output of the table generated
		i.e:
			03:59:59  [7ms]   CREATE TABLE IF NOT EXISTS __clear_metadatas ( metatype text NOT NULL, value text NOT NULL );
			03:59:59  [2ms]   CREATE UNIQUE INDEX IF NOT EXISTS __clear_metadatas_idx ON __clear_metadatas (metatype, value);
			03:59:59  [7ms] SELECT * FROM __clear_metadatas WHERE ("metatype" = 'migration')
			03:59:59  [911Âµs] BEGIN
			2020-07-14T18:59:59.121830Z   INFO - [Clear::Migration::Direction(@dir=true)] CreateTable
			03:59:59  (Info) [Clear::Migration::Direction(@dir=true)] CreateTable
			03:59:59  [2ms] CREATE TYPE gender AS ENUM ('male', 'female', 'unknow')
			03:59:59  [1ms] CREATE TYPE renda AS ENUM ('low', 'mid', 'high', 'unknow')
			03:59:59  [278ms] CREATE TABLE users (id uuid NOT NULL PRIMARY KEY, username text NOT NULL, phone text NOT NULL, money float, gender gender DEFAULT 'unknow', created_at timestamp without time zone NOT NULL DEFAULT NOW(), updated_at timestamp without time zone NOT NULL DEFAULT NOW())
			03:59:59  [24ms] CREATE UNIQUE INDEX users_phone ON users (phone)
			03:59:59  [26ms] CREATE INDEX users_created_at ON users (created_at)
			03:59:59  [23ms] CREATE INDEX users_updated_at ON users (updated_at)
			03:59:59  [1ms] INSERT INTO "__clear_metadatas" ("metatype", "value") VALUES ('migration', '1')
			03:59:59  [11ms] COMMIT
5) put the sql into file migration created at part 4.2, and make on hand the down process (unhappyly :( )
6) now say to amber the version actual of our db typing 'amber db migrate' in the terminal
7) END. (remimber always change ou comment the file required at part 4.3 when you finish the process)